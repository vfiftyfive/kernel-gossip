#!/usr/bin/env bpftrace
/*
 * Cgroup-Filtered Syscall Counter
 * The most elegant solution - tracks syscalls by cgroup path
 * Each pod gets its own cgroup, so this gives exact pod-level metrics
 */

#include <linux/sched.h>
#include <linux/cgroup.h>

BEGIN {
    printf("🎯 Cgroup-Based Pod Syscall Tracking\n");
    printf("📦 Filtering by Kubernetes pod cgroups\n");
    @start = nsecs;
}

// Track cgroup creation for pods
kprobe:cgroup_mkdir {
    $path = str(arg1);
    if (strcontains($path, "kubepods") && strcontains($path, "pod")) {
        // Extract pod UID from path like:
        // /kubepods/burstable/pod<UID>/
        @pod_cgroups[$path] = nsecs;
        printf("🆕 New pod cgroup created: %s\n", $path);
    }
}

// More efficient: Track by cgroup ID when processes attach
kprobe:cgroup_attach_task {
    $cgroup = (struct cgroup *)arg0;
    $task = (struct task_struct *)arg1;
    
    // Get cgroup path - this is pod-specific
    $cg_id = $cgroup->kn->id;
    
    // Map PID to cgroup ID for fast lookup
    @pid_to_cgid[pid] = $cg_id;
    
    // Check if this is a pod cgroup (heuristic: new cgroups in last minute)
    if (@pod_cgroups[$cg_id] == 0 && comm == "runc") {
        @pod_cgroups[$cg_id] = nsecs;
        @pod_names[$cg_id] = comm;  // Would need actual pod name extraction
        printf("📌 Tracking new pod cgroup %d for process %d (%s)\n", $cg_id, pid, comm);
    }
}

// Count syscalls filtered by cgroup
tracepoint:raw_syscalls:sys_enter {
    $cgid = @pid_to_cgid[pid];
    
    if ($cgid != 0 && @pod_cgroups[$cgid] != 0) {
        // This syscall belongs to a tracked pod!
        @pod_syscalls[$cgid]++;
        @syscalls_by_type[$cgid, args->id]++;
        
        // Track golden syscalls
        if (args->id == 56 || args->id == 57) {  // clone
            @golden_stats[$cgid, "clone"]++;
        } else if (args->id == 165) {  // mount
            @golden_stats[$cgid, "mount"]++;
        } else if (args->id == 435) {  // clone3
            @golden_stats[$cgid, "clone3"]++;
        } else if (args->id == 257) {  // openat
            @golden_stats[$cgid, "openat"]++;
        }
    }
}

// Track process exit to clean up
tracepoint:sched:sched_process_exit {
    delete(@pid_to_cgid[pid]);
}

// Periodic reporting
interval:s:10 {
    printf("\n📊 Pod-Level Syscall Statistics:\n");
    printf("════════════════════════════════\n");
    
    // Show stats per cgroup (pod)
    printf("Per-Pod Syscalls:\n");
    print(@pod_syscalls, 5);
    
    printf("\nGolden Syscalls by Pod:\n");
    print(@golden_stats, 10);
    
    // Calculate syscalls per second for each pod
    $elapsed = (nsecs - @start) / 1000000000;
    printf("\nSyscalls/sec by pod:\n");
    
    // Note: In real bpftrace we'd iterate, here showing concept
    printf("  (Divide totals by %d seconds)\n", $elapsed);
}

// Advanced: Detect pod creation completion
// When syscall rate drops below threshold, pod is likely initialized
interval:s:1 {
    // Pseudo-code for detection logic
    // In real implementation, track rate changes per cgroup
}

END {
    printf("\n🏁 Final Per-Pod Statistics:\n");
    print(@pod_syscalls);
    printf("\nTop syscalls by type per pod:\n");
    print(@syscalls_by_type, 20);
    
    clear(@pid_to_cgid);
    clear(@pod_cgroups);
    clear(@pod_syscalls);
    clear(@syscalls_by_type);
    clear(@golden_stats);
}