#!/usr/bin/env bpftrace
/*
 * Container Lifecycle Tracker - Captures the GOLDEN syscalls for container creation
 * Tracks namespace creation, cgroup operations, and network setup
 */

BEGIN {
    printf("üöÄ Starting Container Lifecycle Tracking...\n");
    printf("üì¶ Monitoring GOLDEN syscalls for container creation\n");
    @start = nsecs;
    
    // Initialize counters for golden syscalls
    @clone_count = 0;
    @unshare_count = 0;
    @setns_count = 0;
    @mount_count = 0;
    @mkdir_count = 0;
    @write_cgroup = 0;
    @iptables_ops = 0;
    @network_ops = 0;
}

// CLONE - The foundation of container creation (PID namespace)
tracepoint:raw_syscalls:sys_enter /args->id == 56 || args->id == 57/ {
    @clone_count++;
    @golden_syscalls["clone", comm]++;
    if (str(comm) == "containerd" || str(comm) == "runc" || str(comm) == "docker") {
        printf("üî∏ CLONE: Process forking for container (comm=%s, pid=%d)\n", comm, pid);
    }
}

// UNSHARE - Creating new namespaces  
tracepoint:raw_syscalls:sys_enter /args->id == 272/ {
    @unshare_count++;
    @golden_syscalls["unshare", comm]++;
    printf("üìç UNSHARE: New namespace created (comm=%s)\n", comm);
}

// SETNS - Joining namespaces
tracepoint:raw_syscalls:sys_enter /args->id == 308/ {
    @setns_count++;
    @golden_syscalls["setns", comm]++;
    printf("üîó SETNS: Joining namespace (comm=%s)\n", comm);
}

// MOUNT - Setting up filesystem
tracepoint:raw_syscalls:sys_enter /args->id == 165/ {
    @mount_count++;
    @golden_syscalls["mount", comm]++;
    if (str(comm) == "runc" || str(comm) == "containerd") {
        printf("üíæ MOUNT: Filesystem operation (comm=%s)\n", comm);
    }
}

// OPENAT + WRITE - Tracking cgroup operations
tracepoint:raw_syscalls:sys_enter /args->id == 257/ {
    @openat_args[tid] = args->id;
}

tracepoint:raw_syscalls:sys_exit /pid == $1 && @openat_args[tid] == 257/ {
    delete(@openat_args[tid]);
}

// Track writes to cgroup files
kprobe:cgroup_file_write {
    @write_cgroup++;
    @golden_syscalls["cgroup_write", comm]++;
    printf("‚öôÔ∏è CGROUP: Resource limit set (comm=%s)\n", comm);
}

// MKDIR - Creating cgroup directories
tracepoint:raw_syscalls:sys_enter /args->id == 83/ {
    @mkdir_count++;
    if (str(comm) == "systemd" || str(comm) == "runc" || str(comm) == "containerd") {
        @golden_syscalls["mkdir_cgroup", comm]++;
        printf("üìÇ MKDIR: Cgroup directory created (comm=%s)\n", comm);
    }
}

// Network namespace operations (socket creation)
tracepoint:raw_syscalls:sys_enter /args->id == 41/ {
    @network_ops++;
    if (str(comm) == "runc" || str(comm) == "containerd") {
        @golden_syscalls["socket", comm]++;
    }
}

// Track iptables operations (for network rules)
kprobe:xt_register_* {
    @iptables_ops++;
    @golden_syscalls["iptables", comm]++;
}

// Summary every 10 seconds
interval:s:10 {
    printf("\nüìä Container Lifecycle Summary:\n");
    printf("  üåü GOLDEN SYSCALLS for Container Creation:\n");
    printf("    CLONE (PID namespace):     %d\n", @clone_count);
    printf("    UNSHARE (new namespaces):  %d\n", @unshare_count);
    printf("    SETNS (join namespaces):   %d\n", @setns_count);
    printf("    MOUNT (filesystem):        %d\n", @mount_count);
    printf("    MKDIR (cgroup dirs):       %d\n", @mkdir_count);
    printf("    CGROUP writes:             %d\n", @write_cgroup);
    printf("    Network operations:        %d\n", @network_ops);
    printf("    IPTables rules:            %d\n", @iptables_ops);
    
    printf("\n  üîù Top Golden Syscalls by Process:\n");
    print(@golden_syscalls, 10);
}

// Detect pod creation pattern
interval:s:5 {
    // If we see the golden pattern, it's likely a pod creation
    if (@clone_count > 0 && @mount_count > 0 && @write_cgroup > 0) {
        printf("\nüéØ POD CREATION DETECTED!\n");
        printf("  Clone: %d, Mount: %d, Cgroup: %d, Network: %d\n",
               @clone_count, @mount_count, @write_cgroup, @network_ops);
        
        // Reset counters after detection
        @clone_count = 0;
        @mount_count = 0;
        @write_cgroup = 0;
        @network_ops = 0;
    }
}

END {
    printf("\nüèÅ Final Container Lifecycle Stats:\n");
    printf("  Total clone operations: %d\n", @clone_count);
    printf("  Total unshare operations: %d\n", @unshare_count);
    printf("  Total setns operations: %d\n", @setns_count);
    printf("  Total mount operations: %d\n", @mount_count);
    printf("  Total cgroup writes: %d\n", @write_cgroup);
    printf("  Total network ops: %d\n", @network_ops);
    
    clear(@golden_syscalls);
    clear(@openat_args);
}