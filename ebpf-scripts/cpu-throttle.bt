#!/usr/bin/env bpftrace
/*
 * CPU Throttle Detector - REAL eBPF program to detect CPU throttling
 * Simplified version that works without kernel headers
 */

BEGIN {
    printf("üîç Starting CPU throttle detection...\n");
    printf("Monitoring CPU usage and throttling patterns\n");
    @throttle_count = 0;
    @long_throttles = 0;
}

// Monitor high CPU usage processes
profile:hz:99 {
    if (cpu == 100) {
        @cpu_high[comm]++;
    }
}

// Track context switches (possible throttling indicator)
tracepoint:sched:sched_switch {
    if (args->prev_state == 0) { // Task was runnable but switched out
        @context_switches[comm]++;
        if (@context_switches[comm] > 1000) {
            @throttle_count++;
            printf("üö® Possible CPU THROTTLE detected for %s! Count: %d\n", comm, @throttle_count);
        }
    }
}

// Detect processes waiting for CPU
tracepoint:sched:sched_process_wait {
    @wait_time[comm] = nsecs;
    if (@wait_time[comm] > 100000000) { // More than 100ms wait
        @long_throttles++;
        printf("‚è∞ Process %s waiting for CPU (possible throttle)\n", comm);
    }
}

// Summary every 10 seconds
interval:s:10 {
    printf("\nüéØ Throttle Summary:\n");
    printf("  Total throttle events: %d\n", @throttle_count);
    printf("  Long throttles (>100ms): %d\n", @long_throttles);
    
    if (@throttle_count > 0) {
        printf("  ‚ö†Ô∏è  HIGH CPU PRESSURE DETECTED!\n");
    }
}

END {
    printf("\nüèÅ Final throttle statistics:\n");
    printf("  Total throttle events: %d\n", @throttle_count);
    printf("  Long throttles: %d\n", @long_throttles);
    clear(@wait_time);
    clear(@context_switches);
    clear(@cpu_high);
}