import px

# Configuration from environment - NO HARDCODING
WEBHOOK_URL = px.endpoint_config.get("WEBHOOK_URL", "http://kernel-gossip-operator:8080/webhook/pixie")
THROTTLE_THRESHOLD = px.parse_float(px.endpoint_config.get("THROTTLE_THRESHOLD", "10.0"))
WARNING_THRESHOLD = px.parse_float(px.endpoint_config.get("WARNING_THRESHOLD", "50.0"))
CRITICAL_THRESHOLD = px.parse_float(px.endpoint_config.get("CRITICAL_THRESHOLD", "80.0"))

def cpu_throttle_detector():
    """
    Detects CPU throttling that metrics don't show.
    Finds pods that show low CPU% but high throttling.
    """
    # Get REAL data from kernel via process_stats table
    df = px.DataFrame('process_stats')
    
    # Must have pod context - filter out empty pod names
    df = df[df.pod_name != ""]
    
    # Calculate REAL throttling percentage
    # cpu_throttled_ns: nanoseconds throttled
    # runtime_ns: total runtime in nanoseconds
    df.cpu_throttled_pct = (df.cpu_throttled_ns / df.runtime_ns) * 100.0
    df.cpu_usage_pct = (df.cpu_usage_ns / df.runtime_ns) * 100.0
    
    # Find the liars - only keep pods with throttling above threshold
    df = df[df.cpu_throttled_pct > THROTTLE_THRESHOLD]
    
    # Add severity based on throttling level
    df.severity = px.select(
        df.cpu_throttled_pct > CRITICAL_THRESHOLD, "critical",
        df.cpu_throttled_pct > WARNING_THRESHOLD, "warning",
        "info"
    )
    
    # Group by pod for cleaner output - get worst case per pod
    output = df.groupby(['pod_name', 'namespace']).agg(
        cpu_usage_pct_mean=('cpu_usage_pct', px.mean),
        cpu_throttled_pct_max=('cpu_throttled_pct', px.max),
        severity_max=('severity', px.max)
    )
    
    # Rename columns to match expected schema
    output.cpu_usage_pct = output.cpu_usage_pct_mean
    output.cpu_throttled_pct = output.cpu_throttled_pct_max
    output.severity = output.severity_max
    
    # Add metadata
    output.timestamp = px.now()
    output.cluster = px.vizier_id()
    
    # Select final columns in correct order
    output = output[['timestamp', 'cluster', 'pod_name', 'namespace', 
                     'cpu_usage_pct', 'cpu_throttled_pct', 'severity']]
    
    return output

# Export to webhook - REAL endpoint configured via environment
px.export(cpu_throttle_detector(), px.Webhook(url=WEBHOOK_URL))