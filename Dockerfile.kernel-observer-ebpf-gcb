# Dockerfile for kernel-observer with REAL eBPF support (Cloud Build)
# ====================================================================
# Uses nightly Rust for better eBPF target support

# Build stage - compile eBPF and userspace
FROM rust:latest AS builder

# Install dependencies for eBPF compilation
RUN apt-get update && apt-get install -y \
    llvm \
    clang \
    libbpf-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Use nightly Rust for eBPF target support
RUN rustup default nightly && \
    rustup component add rust-src --toolchain nightly

# Install bpf-linker
RUN cargo install bpf-linker

# Try to add the target (might fail on some versions)
RUN rustup target add bpfel-unknown-none || true

WORKDIR /build

# Copy workspace files
COPY Cargo.toml Cargo.lock ./
COPY crates/ ./crates/

# Build eBPF programs with build-std
WORKDIR /build/crates/kernel-observer-ebpf-v2
RUN cargo +nightly build \
    --target bpfel-unknown-none \
    -Z build-std=core \
    --release || \
    echo "eBPF build failed, continuing with userspace only"

# Build userspace with eBPF support (feature flag)
WORKDIR /build/crates/kernel-observer
RUN cargo build --release --features ebpf --bin kernel-observer

# Runtime stage
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libbpf1 \
    && rm -rf /var/lib/apt/lists/*

# Copy compiled eBPF programs (if they exist)
COPY --from=builder /build/crates/kernel-observer-ebpf-v2/target/bpfel-unknown-none/release/syscall_counter* /opt/ebpf/ || true
COPY --from=builder /build/crates/kernel-observer-ebpf-v2/target/bpfel-unknown-none/release/throttle_detector* /opt/ebpf/ || true

# Copy userspace binary
COPY --from=builder /build/crates/kernel-observer/target/release/kernel-observer /usr/local/bin/

# Set environment for eBPF
ENV RUST_LOG=kernel_observer=info,aya=info
ENV ENABLE_EBPF=true

ENTRYPOINT ["/usr/local/bin/kernel-observer"]